import pandas as pd
import yfinance as yf
import numpy as np
import matplotlib.pyplot as plt
from scipy import stats
import seaborn as sns

class FallenAngelHarvester:
    def __init__(self, start_date='2015-01-01', end_date=None):
        self.start_date = start_date
        self.end_date = end_date or pd.Timestamp.now().strftime('%Y-%m-%d')
        self.tickers = {
            'fallen_angel': 'FALN',  # iShares Fallen Angels USD Bond ETF
            'high_yield': 'HYG',     # iShares iBoxx $ High Yield Corporate Bond ETF
            'investment_grade': 'LQD' # iShares iBoxx $ Investment Grade Corporate Bond ETF
        }
        self.data = None
        self.returns = None
        self.signals = None
        self.strategy_returns = None
        
    def fetch_data(self):
        """Download historical price data for all ETFs"""
        print("Fetching historical data...")
        self.data = yf.download(
            list(self.tickers.values()),
            start=self.start_date,
            end=self.end_date
        )['Adj Close']
        
        # Calculate returns
        self.returns = self.data.pct_change().dropna()
        
    def calculate_spreads(self):
        """Calculate credit spreads and risk premia"""
        # Calculate spread between Fallen Angels and High Yield
        self.returns['fallen_angel_spread'] = (
            self.returns[self.tickers['fallen_angel']] - 
            self.returns[self.tickers['high_yield']]
        )
        
        # Calculate spread between Fallen Angels and Investment Grade
        self.returns['fallen_angel_ig_spread'] = (
            self.returns[self.tickers['fallen_angel']] - 
            self.returns[self.tickers['investment_grade']]
        )
        
    def generate_signals(self, lookback_period=252):
        """Generate trading signals based on spread analysis"""
        # Calculate rolling statistics
        rolling_mean = self.returns['fallen_angel_spread'].rolling(window=lookback_period).mean()
        rolling_std = self.returns['fallen_angel_spread'].rolling(window=lookback_period).std()
        
        # Generate z-score based signals
        z_scores = (self.returns['fallen_angel_spread'] - rolling_mean) / rolling_std
        
        # Create signals (1 for long, -1 for short, 0 for neutral)
        self.signals = pd.Series(0, index=self.returns.index)
        self.signals[z_scores > 1] = 1    # Long when spread is wide
        self.signals[z_scores < -1] = -1  # Short when spread is narrow
        
    def calculate_strategy_returns(self):
        """Calculate strategy returns"""
        # Calculate strategy returns (long-short portfolio)
        self.strategy_returns = (
            self.signals.shift(1) * self.returns['fallen_angel_spread']
        ).dropna()
        
    def calculate_performance_metrics(self):
        """Calculate key performance metrics"""
        # Annualized returns
        annualized_return = self.strategy_returns.mean() * 252
        
        # Annualized volatility
        annualized_vol = self.strategy_returns.std() * np.sqrt(252)
        
        # Sharpe ratio (assuming risk-free rate of 0.02)
        risk_free_rate = 0.02
        sharpe_ratio = (annualized_return - risk_free_rate) / annualized_vol
        
        # Maximum drawdown
        cumulative_returns = (1 + self.strategy_returns).cumprod()
        rolling_max = cumulative_returns.expanding().max()
        drawdowns = cumulative_returns / rolling_max - 1
        max_drawdown = drawdowns.min()
        
        # Sortino ratio (using downside deviation)
        downside_returns = self.strategy_returns[self.strategy_returns < 0]
        downside_std = np.sqrt(np.mean(downside_returns**2)) * np.sqrt(252)
        sortino_ratio = (annualized_return - risk_free_rate) / downside_std
        
        return {
            'Annualized Return': f"{annualized_return:.2%}",
            'Annualized Volatility': f"{annualized_vol:.2%}",
            'Sharpe Ratio': f"{sharpe_ratio:.2f}",
            'Sortino Ratio': f"{sortino_ratio:.2f}",
            'Maximum Drawdown': f"{max_drawdown:.2%}"
        }
    
    def plot_results(self):
        """Create visualization of strategy performance"""
        # Create figure with subplots
        fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(15, 12))
        
        # Plot 1: Cumulative returns
        cumulative_returns = (1 + self.strategy_returns).cumprod()
        ax1.plot(cumulative_returns.index, cumulative_returns.values)
        ax1.set_title('Strategy Cumulative Returns')
        ax1.set_xlabel('Date')
        ax1.set_ylabel('Cumulative Returns')
        ax1.grid(True)
        
        # Plot 2: Spread and signals
        ax2.plot(self.returns.index, self.returns['fallen_angel_spread'], 
                label='Fallen Angel Spread', alpha=0.7)
        ax2.scatter(self.returns.index[self.signals == 1], 
                   self.returns['fallen_angel_spread'][self.signals == 1],
                   color='green', label='Long Signal', alpha=0.5)
        ax2.scatter(self.returns.index[self.signals == -1], 
                   self.returns['fallen_angel_spread'][self.signals == -1],
                   color='red', label='Short Signal', alpha=0.5)
        ax2.set_title('Fallen Angel Spread and Trading Signals')
        ax2.set_xlabel('Date')
        ax2.set_ylabel('Spread')
        ax2.legend()
        ax2.grid(True)
        
        # Plot 3: Rolling Sharpe ratio
        rolling_sharpe = self.strategy_returns.rolling(window=252).mean() / \
                        self.strategy_returns.rolling(window=252).std() * np.sqrt(252)
        ax3.plot(rolling_sharpe.index, rolling_sharpe.values)
        ax3.set_title('Rolling Sharpe Ratio (252-day window)')
        ax3.set_xlabel('Date')
        ax3.set_ylabel('Sharpe Ratio')
        ax3.grid(True)
        
        plt.tight_layout()
        plt.show()
        
    def run_strategy(self):
        """Run the complete strategy"""
        self.fetch_data()
        self.calculate_spreads()
        self.generate_signals()
        self.calculate_strategy_returns()
        
        # Print performance metrics
        metrics = self.calculate_performance_metrics()
        print("\nStrategy Performance Metrics:")
        for metric, value in metrics.items():
            print(f"{metric}: {value}")
        
        # Plot results
        self.plot_results()

if __name__ == "__main__":
    # Initialize and run strategy
    harvester = FallenAngelHarvester()
    harvester.run_strategy()
